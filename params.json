{"name":"React-image-lightbox","tagline":"Lightbox component for React.js","body":"# React Image Lightbox\r\n\r\nA flexible lightbox component for displaying images in a React project.\r\n\r\nFeatures\r\n- Few dependencies\r\n- Keyboard shortcuts (with rate limiting)\r\n- Image preloading for smoother viewing\r\n- Flexible rendering using src values assigned on the fly\r\n\r\n## Example\r\n\r\n```jsx\r\nvar React    = require('react');\r\nvar Lightbox = require('react-image-lightbox');\r\n\r\nvar images = [\r\n    'http://placekitten.com/1500/500',\r\n    'http://placekitten.com/4000/3000',\r\n    'http://placekitten.com/800/1200',\r\n    'http://placekitten.com/1500/1500'\r\n];\r\n\r\nmodule.exports = React.createClass({\r\n    getInitialState: function() {\r\n        return {\r\n            index: 0,\r\n            isOpen: false\r\n        };\r\n    },\r\n    openLightbox: function() {\r\n        this.setState({ isOpen: true });\r\n    },\r\n    closeLightbox: function() {\r\n        this.setState({ isOpen: false });\r\n    },\r\n    moveNext: function() {\r\n        this.setState({ index: (this.state.index + 1) % images.length });\r\n    },\r\n    movePrev: function() {\r\n        this.setState({ index: (this.state.index + images.length - 1) % images.length });\r\n    },\r\n    render: function() {\r\n        var lightbox = '';\r\n        if (this.state.isOpen) {\r\n            lightbox = (\r\n                <Lightbox\r\n                    mainSrc={images[this.state.index]}\r\n                    nextSrc={images[(this.state.index + 1) % images.length]}\r\n                    prevSrc={images[(this.state.index + images.length - 1) % images.length]}\r\n\r\n                    onCloseRequest={this.closeLightbox}\r\n                    onMovePrevRequest={this.movePrev}\r\n                    onMoveNextRequest={this.moveNext}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <button type=\"button\" onClick={this.openLightbox}>Open Lightbox</button>\r\n                {lightbox}\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\r\n```\r\n\r\n## Options\r\n\r\nProperty            | Type   | Default        | Required | Description\r\n:-------------------|:------:|:--------------:|:--------:|:----------------------------------------\r\nmainSrc             | string |                |    yes   | Main display image url\r\nprevSrc             | string |                |          | Previous display image url (displayed to the left). If left undefined, movePrev actions will not be performed, and the button not displayed\r\nnextSrc             | string |                |          | Next display image url (displayed to the right). If left undefined, moveNext actions will not be performed, and the button not displayed\r\nmainSrcThumbnail    | string |                |          | Thumbnail image url corresponding to props.mainSrc\r\nprevSrcThumbnail    | string |                |          | Thumbnail image url corresponding to props.prevSrc\r\nnextSrcThumbnail    | string |                |          | Thumbnail image url corresponding to props.nextSrc\r\nonCloseRequest      | func   |                |    yes   | Close window event. Should change the parent state such that the lightbox is not rendered\r\nonMovePrevRequest   | func   | empty function |          | Move to previous image event. Should change the parent state such that props.prevSrc becomes props.mainSrc, props.mainSrc becomes props.nextSrc, etc.\r\nonMoveNextRequest   | func   | empty function |          | Move to next image event. Should change the parent state such that props.nextSrc becomes props.mainSrc, props.mainSrc becomes props.prevSrc, etc.\r\ndiscourageDownloads | bool   | `false`        |          | Enable download discouragement (prevents [right-click -> Save Image As...])\r\nanimationDisabled   | bool   | `false`        |          | Disable all animation\r\nanimationOnKeyInput | bool   | `false`        |          | Disable animation on actions performed with keyboard shortcuts\r\nanimationDuration   | number | `300`          |          | Animation duration (ms)\r\nkeyRepeatLimit      | number | `180`          |          | Required interval of time (ms) between key actions (prevents excessively fast navigation of images)\r\nkeyRepeatKeyupBonus | number | `40`           |          | Amount of time (ms) restored after each keyup (makes rapid key presses slightly faster than holding down the key to navigate images)\r\nimageTitle          | string |                |          | Image title\r\ntoolbarButtons      | node[] |                |          | Array of custom toolbar buttons\r\nimagePadding        | number | `10`           |          | Padding (px) between the edge of the window and the lightbox\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}